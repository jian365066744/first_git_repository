<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:sharding="http://shardingjdbc.io/schema/shardingjdbc/sharding"
   xmlns:masterslave="http://shardingjdbc.io/schema/shardingjdbc/masterslave"

	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.2.xsd
         http://www.springframework.org/schema/tx
     	 http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		 http://www.springframework.org/schema/mvc 
		 http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		 http://www.springframework.org/schema/jms 
		 http://www.springframework.org/schema/jms/spring-jms-3.0.xsd 
		 http://www.springframework.org/schema/data/jpa  
         http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://shardingjdbc.io/schema/shardingjdbc/sharding
		classpath:/META-INF/namespace/sharding.xsd
		http://shardingjdbc.io/schema/shardingjdbc/masterslave
		classpath:/META-INF/namespace/master-slave.xsd
		">
	
	<!-- jms配置文件 -->
	<import resource="applicationContext-jms.xml" />
	
	<!-- redis配置文件 -->
	<!-- <import resource="applicationContext-redis.xml" /> -->
	
	<!-- redis配置文件 -->
	<import resource="spring-data-redis-cluster.xml" />
	
	
	<context:property-placeholder location="classpath*:application.properties" ignore-unresolvable="true"/>
	
    <!-- 定义受环境影响易变的变量 -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:application.properties</value>
			</list>
		</property>
	</bean> -->
	
	<!-- 以静态变量保存ApplicationContext -->
	<bean class="org.modules.utils.spring.SpringContextHolder" lazy-init="false" />
	
	<bean id="cacheServiceImpl" class="com.ronglian.qd_qrcode.common.utils.cache.RedisClusterClient"/>
	
	<!--开启IOC注解扫描  自动注册bean,并保证@Required,@Autowired的属性被注入，排除Controller -->
	<context:component-scan base-package="com.*">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /> 
	</context:component-scan>
	<!-- 数据源配置, 使用Druid 数据库连接池 -->
	<bean id="jfpt_qd_0" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysql.driverClassName}" />
		<property name="url" value="${jdbc_url0}" />
		<property name="username" value="${jdbc_username0}" />
		<property name="password" value="${jdbc_password0}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>

	<bean id="jfpt_qd_1" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysql.driverClassName}" />
		<property name="url" value="${jdbc_url1}" />
		<property name="username" value="${jdbc_username1}" />
		<property name="password" value="${jdbc_password1}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>
	
	<bean id="jfpt_qd_2" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysql.driverClassName}" />
		<property name="url" value="${jdbc_url2}" />
		<property name="username" value="${jdbc_username2}" />
		<property name="password" value="${jdbc_password2}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>
	
	
	<bean id="jfpt_qd_0_0" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysql.driverClassName}" />
		<property name="url" value="${jdbc_url00}" />
		<property name="username" value="${jdbc_username00}" />
		<property name="password" value="${jdbc_password00}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>

	<bean id="jfpt_qd_1_1" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysql.driverClassName}" />
		<property name="url" value="${jdbc_url11}" />
		<property name="username" value="${jdbc_username11}" />
		<property name="password" value="${jdbc_password11}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>
	
	<bean id="jfpt_qd_2_2" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysql.driverClassName}" />
		<property name="url" value="${jdbc_url22}" />
		<property name="username" value="${jdbc_username22}" />
		<property name="password" value="${jdbc_password22}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>
	
	<masterslave:data-source id="msDataSource0" master-data-source-name="jfpt_qd_0" slave-data-source-names="jfpt_qd_0_0" strategy-type="RANDOM"/>
	<masterslave:data-source id="msDataSource1" master-data-source-name="jfpt_qd_1" slave-data-source-names="jfpt_qd_1_1" strategy-type="RANDOM"/>
	<masterslave:data-source id="msDataSource2" master-data-source-name="jfpt_qd_2" slave-data-source-names="jfpt_qd_2_2" strategy-type="RANDOM"/>
	<!-- <masterslave:data-source id="msDataSource0" master-data-source-name="jfpt_qd_0" slave-data-source-names="jfpt_qd_0_0" strategy-ref="followRule"/>
	<masterslave:data-source id="msDataSource1" master-data-source-name="jfpt_qd_1" slave-data-source-names="jfpt_qd_1_1" strategy-ref="followRule"/>
	<masterslave:data-source id="msDataSource2" master-data-source-name="jfpt_qd_2" slave-data-source-names="jfpt_qd_2_2" strategy-ref="followRule"/> -->
	<!-- 路由表、路由库规则配置，可以指定algorithm-class专门自己实现具体的路由规则，也可以使用表达式-->

	<!-- <sharding:strategy id="userDatabaseShardingStrategy" sharding-columns="name" algorithm-class="com.ronglian.qd_qrcode.sharding.algorithm.UserDatabaseShardingAlgorithm"/> -->
	<!--<sharding:strategy id="userTableShardingStrategy" sharding-columns="name" algorithm-class="com.ronglian.qd_qrcode.sharding.algorithm.UserTableShardingAlgorithm"/> -->

	<!-- 使用表达式方式 -->
	<sharding:inline-strategy id="userDatabaseShardingStrategy" sharding-column="name" algorithm-expression="msDataSource${Integer.valueOf(name.substring(name.length()-1))  % 3}"/>
	<sharding:inline-strategy id="userTableShardingStrategy" sharding-column="name" algorithm-expression="userinfo"/>

	<sharding:data-source id="shardingDataSource">
		<sharding:sharding-rule data-source-names="msDataSource0,msDataSource1,msDataSource2" >
			<sharding:table-rules>
				<sharding:table-rule logic-table="userinfo" actual-data-nodes="msDataSource${0..2}.userinfo" table-strategy-ref="userTableShardingStrategy" database-strategy-ref="userDatabaseShardingStrategy"/>
			</sharding:table-rules>
		</sharding:sharding-rule>
		<sharding:props>
			<prop key="sql.show">true</prop>
		</sharding:props>
	</sharding:data-source>
    
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="shardingDataSource"/>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="database" value="MYSQL" />
			</bean>
		</property>
		<property name="packagesToScan" value="com.ronglian.qd_qrcode"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<!-- 启用 annotation事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 配置Spring Data JPA扫描目录 -->
	<jpa:repositories base-package="com.ronglian.qd_qrcode" entity-manager-factory-ref="entityManagerFactory" />
	
	<!-- ========================老数据库源配置========================== -->
	
<!-- 	
	<bean id="jfpt_qd" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysql.driverClassName}" />
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		初始化连接大小
		<property name="initialSize" value="0" />
		连接池最大使用连接数量
		<property name="maxActive" value="20" />
		连接池最小空闲
		<property name="minIdle" value="0" />
		获取连接最大等待时间
		<property name="maxWait" value="60000" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		打开removeAbandoned功能
		<property name="removeAbandoned" value="true" />
		1800秒，也就是30分钟
		<property name="removeAbandonedTimeout" value="1800" />
		关闭abanded连接时输出错误日志
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>
	<bean id="entityManagerFactory1" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	<property name="dataSource" ref="jfpt_qd"/>
	<property name="jpaVendorAdapter">
		<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
			<property name="generateDdl" value="true" />
			<property name="database" value="MYSQL" />
		</bean>
	</property>
	<property name="packagesToScan" value="com.test.*"/>
       <property name="jpaProperties">
           <props>
               <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
               <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
               <prop key="hibernate.show_sql">true</prop>
               <prop key="hibernate.format_sql">true</prop>
               <prop key="hibernate.hbm2ddl.auto">update</prop>
           </props>
       </property>
	</bean>

	配置事务管理器
	<bean id="transactionManager1" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory1" />
	</bean>
	启用 annotation事务
	<tx:annotation-driven transaction-manager="transactionManager1" proxy-target-class="true"/>
	配置Spring Data JPA扫描目录
	<jpa:repositories base-package="com.test.*" entity-manager-factory-ref="entityManagerFactory1"/>

 	<jpa:repositories base-package="com.test"  entity-manager-factory-ref="entityManagerFactory1" transaction-manager-ref="transactionManager1"/> -->
 </beans>